package com.demo1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;


public class UserDAO {
	private String jdbcURL = "jdbc:mysql://localhost:3306/demo1";
	private String jdbcUsername = "root";
	private String jdbcPassword = "123456";
	private Connection jdbcConnection;
	private static final String insertStudentSQL = "insert into student(stuName,stuAddress) values(?,?)";
	private static final String updateStudentSQL = "update student set stuName=?, stuAddress=? where id=?";
	private static final String selectStudentSQL = "select * from student where id=?";
	private static final String listStudentsSQL = "select * from student";

	protected void connect() throws SQLException {
		if (jdbcConnection == null || jdbcConnection.isClosed()) {
			try {
				Class.forName("com.mysql.cj.jdbc.Driver");
			} catch (ClassNotFoundException e) {
				throw new SQLException(e);
			}
			jdbcConnection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
		}
	}

	protected void disconnect() throws SQLException {
		if (jdbcConnection != null && !jdbcConnection.isClosed()) {
			jdbcConnection.close();
		}
	}
	
	public boolean insertStudent(UserPOJO pojo) throws SQLException {
		connect();
		PreparedStatement statement = jdbcConnection.prepareStatement(insertStudentSQL);
		statement.setString(1, pojo.getName());
		statement.setString(2, pojo.getAddress());
		Boolean status = statement.executeUpdate()>0;
		statement.close();
		disconnect();
		return status;
	}

	// update record
	public boolean updateStudent(UserPOJO pojo) throws ClassNotFoundException, SQLException {
		connect();
		PreparedStatement statement = jdbcConnection.prepareStatement(updateStudentSQL);
		statement.setString(1, pojo.getName());
		statement.setString(2, pojo.getGender());
		statement.setString(3, pojo.getDob());
		statement.setString(4, pojo.getAddress());
		statement.setString(5, pojo.getClassName());
		statement.setInt(6, pojo.getId());
		boolean rowUpdated = statement.executeUpdate() > 0;
		statement.close();
		disconnect();
		return rowUpdated;
	}

	// list record by id
	public UserPOJO selectStudent(int id) throws SQLException {
		UserPOJO pojo = null;
		connect();

		PreparedStatement statement = jdbcConnection.prepareStatement(selectStudentSQL);
		statement.setInt(1, id);
		ResultSet resultSet = statement.executeQuery();
		while (resultSet.next()) {
			String stuName = resultSet.getString("stuName");
			String stuGender = resultSet.getString("stuGender");
			String stuDOB = resultSet.getString("stuDOB");
			String stuAddress = resultSet.getString("stuAddress");
			String stuClassName = resultSet.getString("stuClass");
			pojo = new UserPOJO(stuName, stuGender, stuDOB, stuAddress, stuClassName);
		}
		resultSet.close();
		statement.close();
		disconnect();

		return pojo;
	}

	// list all record
	public List<UserPOJO> listStudents() throws SQLException {
		List<UserPOJO> listStudents = new ArrayList<>();
		connect();

		PreparedStatement statement = jdbcConnection.prepareStatement(listStudentsSQL);

		ResultSet resultSet = statement.executeQuery();
		while (resultSet.next()) {
			int stuID = resultSet.getInt("id");
			String stuName = resultSet.getString("stuName");
			String stuAddress = resultSet.getString("stuAddress");
			String stuClassName = resultSet.getString("stuClass");
			UserPOJO pojo = new UserPOJO(stuID, stuName, stuAddress);
			listStudents.add(pojo);
		}
		resultSet.close();
		statement.close();
		disconnect();

		return listStudents;
	}
}

